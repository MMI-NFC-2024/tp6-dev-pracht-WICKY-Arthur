---
import penguins from "../../assets/penguins.json";
import PlotFigure from "../../components/PlotFigure.astro";
import * as Plot from "@observablehq/plot";
import Layout from "../../layouts/Layout.astro";
import Menu from "../../components/Menu.astro";

// Fonction getStaticPaths requise pour les routes dynamiques
export function getStaticPaths() {
    // Extraire les espèces uniques
    const species = [...new Set(penguins.map((p) => p.species))].sort();

    // Générer un chemin pour chaque espèce
    return species.map((speciesName) => {
        return {
            params: { species: speciesName.toLowerCase() },
            props: { speciesName },
        };
    });
}

// Récupérer les props et paramètres
const { speciesName } = Astro.props;
const { species } = Astro.params;

// Filtrer les données pour n'obtenir que les pingouins de l'espèce spécifiée
const filteredPenguins = penguins.filter(
    (p) => p.species.toLowerCase() === species,
);
---

<Layout title={`Pingouins ${speciesName}`}>
    <Menu />
    <main class="max-w-7xl mx-auto px-4 py-8">
        <div class="mb-8 flex items-center">
            <a
                href="/rendu-dynamique"
                class="text-blue-500 hover:text-blue-700 mr-4"
            >
                &larr; Retour à la liste
            </a>
            <h1 class="text-3xl font-bold">Pingouins {speciesName}</h1>
        </div>

        <div class="bg-white p-6 rounded-lg shadow-md mb-8">
            <h2 class="text-xl font-semibold mb-4">Graphique de l'espèce</h2>
            <PlotFigure
                options={{
                    width: 800,
                    height: 500,
                    margin: 40,
                    grid: true,
                    marks: [
                        Plot.dot(filteredPenguins, {
                            x: "culmen_length_mm",
                            y: "culmen_depth_mm",
                            r: "body_mass_g",
                            fill: "sex",
                            stroke: "black",
                            strokeWidth: 0.5,
                            opacity: 0.7,
                            title: (d) =>
                                `${d.sex || "Inconnu"}\nMasse: ${d.body_mass_g || "?"}g\nÎle: ${d.island}`,
                        }),
                        Plot.frame(),
                    ],
                    x: {
                        label: "Longueur du bec (mm)",
                        grid: true,
                    },
                    y: {
                        label: "Profondeur du bec (mm)",
                        grid: true,
                    },
                    style: {
                        fontSize: 14,
                    },
                    color: {
                        legend: true,
                    },
                }}
            />
        </div>

        <div class="bg-white p-6 rounded-lg shadow-md">
            <h2 class="text-xl font-semibold mb-4">Distribution par île</h2>
            <PlotFigure
                options={{
                    width: 800,
                    height: 400,
                    margin: 40,
                    grid: true,
                    marks: [
                        Plot.barY(
                            filteredPenguins,
                            Plot.groupX(
                                { y: "count" },
                                {
                                    x: "island",
                                    fill: "island",
                                    sort: { x: "y", reverse: true },
                                },
                            ),
                        ),
                        Plot.ruleY([0]),
                    ],
                    style: {
                        fontSize: 14,
                    },
                }}
            />
        </div>
    </main>
</Layout>
